Görüntü İşleme Pipeline’ı (Otsu Tabanlı Eşikleme)

1. Görüntü Yükleme ve Yol Yönetimi
Gri tonlamalı (grayscale) görüntü cv2.imread() ile alındı.
Windows path uyumsuzlukları giderildi (raw string yöntemi: r"C:\path\to\file.jpg").
Dosya yolu hataları için try-except blokları eklendi.

2. Görüntü Bilgilerinin Analizi
Görüntü boyutu (width x height) ve piksel değer aralığı (min-max intensity) ekrana yazdırıldı.

3. Histogram Analizi
cv2.calcHist() ile [0–255] piksel değer frekans dağılımı çıkarıldı.
Histogram grafiği matplotlib ile çizilip aynı dizine kaydedildi ve otomatik açıldı.

4. Otsu Yöntemi ile Varyans Maksimizasyonu
Her olası eşik değeri için sınıf içi varyanslar hesaplandı.
Maksimum varyans veren eşik değeri optimal_threshold olarak seçildi.
Eşik değeri ekrana "Esik degeri ~~ X ~~" formatında yazdırıldı.

5. Bimodal Görüntü Üretimi
cv2.threshold() ile görüntü ikili (bimodal) forma dönüştürüldü.
Bimodal görüntü aynı dizine kaydedildi ve otomatik açıldı.

6. Zaman Ölçümü (Performans Analizi)
time modülü ile kodun baştan sona çalışma süresi milisaniye cinsinden ölçüldü.

Sonuç "İşlem sona erdi (Toplam süre: XX ms)" formatında raporlandı.

7. Hata Yönetimi
Tüm adımlar try-except bloklarıyla çevrelendi; hata durumunda hangi aşamada sorun çıktığı açıkça belirtilir hale getirildi.
